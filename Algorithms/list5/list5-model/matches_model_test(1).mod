param n, integer, >= 2; /*no. nodes*/

set V, default {0..n-1}; /*set of nodes*/

set E, within V cross V; /*set of arcs*/

param a{(i,j) in E}, > 0; /*a(i,j) = capacity of (i,j) */

param s, symbolic, in V, default 0; /*setup source node*/

param t, symbolic, in V, default  n-1; /*setup sink node */

var x{(i,j) in E}, >= 0, <= a[i,j]; /* x[i,j] is elementary flow through aÅ›rc (i,j) */

var matches, >= 0; /* total flow from s to t */

s.t. node{i in V}:
    sum{(j,i) in E} x[j,i] + (if i = s then matches) = sum{(i,j) in E} x[i,j] + (if i = t then matches);
    /* summary flow into node i through srcs = summary flow from node i through srcs */

maximize obj: matches;

solve;
    printf {1..56} "="; printf "\n";
    printf "Maximum no matches: %s\n", matches;
 /* printf "Starting node   Ending node   Arc capacity    Flow in arc\n";
    printf "-------------   -----------   ------------    -----------\n";
    printf {(i,j) in E: x[i,j] != 0}: "%13s   %11s   %12g   %11g\n", i, j, a[i,j], x[i,j]; */
    printf {1..56} "="; printf "\n";

data;

param n := 130;

 param : E: a := 
    0 1 1
    0 2 1
    0 3 1
    0 4 1
    0 5 1
    0 6 1
    0 7 1
    0 8 1
    0 9 1
    0 10 1
    0 11 1
    0 12 1
    0 13 1
    0 14 1
    0 15 1
    0 16 1
    0 17 1
    0 18 1
    0 19 1
    0 20 1
    0 21 1
    0 22 1
    0 23 1
    0 24 1
    0 25 1
    0 26 1
    0 27 1
    0 28 1
    0 29 1
    0 30 1
    0 31 1
    0 32 1
    0 33 1
    0 34 1
    0 35 1
    0 36 1
    0 37 1
    0 38 1
    0 39 1
    0 40 1
    0 41 1
    0 42 1
    0 43 1
    0 44 1
    0 45 1
    0 46 1
    0 47 1
    0 48 1
    0 49 1
    0 50 1
    0 51 1
    0 52 1
    0 53 1
    0 54 1
    0 55 1
    0 56 1
    0 57 1
    0 58 1
    0 59 1
    0 60 1
    0 61 1
    0 62 1
    0 63 1
    0 64 1
    1 91 1
    1 70 1
    1 71 1
    1 102 1
    2 121 1
    2 111 1
    2 84 1
    2 128 1
    3 102 1
    3 69 1
    3 105 1
    3 127 1
    4 105 1
    4 83 1
    4 73 1
    4 92 1
    5 77 1
    5 83 1
    5 126 1
    5 101 1
    6 128 1
    6 117 1
    6 73 1
    6 112 1
    7 101 1
    7 96 1
    7 127 1
    7 84 1
    8 92 1
    8 107 1
    8 128 1
    8 67 1
    9 109 1
    9 114 1
    9 102 1
    9 101 1
    10 82 1
    10 83 1
    10 110 1
    10 108 1
    11 82 1
    11 97 1
    11 81 1
    11 104 1
    12 109 1
    12 87 1
    12 104 1
    12 71 1
    13 98 1
    13 125 1
    13 80 1
    13 65 1
    14 71 1
    14 77 1
    14 95 1
    14 74 1
    15 102 1
    15 72 1
    15 87 1
    15 88 1
    16 72 1
    16 83 1
    16 93 1
    16 95 1
    17 105 1
    17 97 1
    17 109 1
    17 93 1
    18 85 1
    18 80 1
    18 83 1
    18 84 1
    19 97 1
    19 87 1
    19 110 1
    19 105 1
    20 113 1
    20 65 1
    20 71 1
    20 93 1
    21 108 1
    21 110 1
    21 123 1
    21 84 1
    22 98 1
    22 104 1
    22 86 1
    22 101 1
    23 82 1
    23 79 1
    23 69 1
    23 121 1
    24 83 1
    24 70 1
    24 116 1
    24 110 1
    25 97 1
    25 119 1
    25 107 1
    25 66 1
    26 91 1
    26 117 1
    26 88 1
    26 79 1
    27 123 1
    27 110 1
    27 76 1
    27 106 1
    28 69 1
    28 85 1
    28 81 1
    28 83 1
    29 71 1
    29 117 1
    29 82 1
    29 86 1
    30 112 1
    30 80 1
    30 79 1
    30 71 1
    31 106 1
    31 73 1
    31 91 1
    31 122 1
    32 125 1
    32 116 1
    32 87 1
    32 75 1
    33 75 1
    33 108 1
    33 118 1
    33 85 1
    34 89 1
    34 76 1
    34 81 1
    34 120 1
    35 87 1
    35 102 1
    35 96 1
    35 91 1
    36 103 1
    36 121 1
    36 81 1
    36 128 1
    37 99 1
    37 73 1
    37 120 1
    37 112 1
    38 85 1
    38 71 1
    38 69 1
    38 101 1
    39 78 1
    39 90 1
    39 85 1
    39 96 1
    40 83 1
    40 99 1
    40 79 1
    40 107 1
    41 124 1
    41 94 1
    41 65 1
    41 73 1
    42 106 1
    42 97 1
    42 88 1
    42 123 1
    43 87 1
    43 66 1
    43 92 1
    43 71 1
    44 97 1
    44 108 1
    44 125 1
    44 115 1
    45 71 1
    45 70 1
    45 108 1
    45 121 1
    46 117 1
    46 103 1
    46 105 1
    46 121 1
    47 65 1
    47 93 1
    47 97 1
    47 94 1
    48 112 1
    48 72 1
    48 76 1
    48 109 1
    49 123 1
    49 111 1
    49 66 1
    49 68 1
    50 99 1
    50 121 1
    50 90 1
    50 109 1
    51 67 1
    51 108 1
    51 128 1
    51 124 1
    52 97 1
    52 78 1
    52 128 1
    52 92 1
    53 111 1
    53 115 1
    53 78 1
    53 68 1
    54 108 1
    54 78 1
    54 76 1
    54 96 1
    55 75 1
    55 89 1
    55 79 1
    55 111 1
    56 91 1
    56 90 1
    56 100 1
    56 122 1
    57 65 1
    57 127 1
    57 72 1
    57 80 1
    58 115 1
    58 68 1
    58 71 1
    58 80 1
    59 117 1
    59 94 1
    59 71 1
    59 77 1
    60 106 1
    60 93 1
    60 70 1
    60 76 1
    61 73 1
    61 70 1
    61 100 1
    61 125 1
    62 88 1
    62 121 1
    62 69 1
    62 79 1
    63 99 1
    63 119 1
    63 102 1
    63 84 1
    64 107 1
    64 101 1
    64 67 1
    64 95 1
    65 129 1
    66 129 1
    67 129 1
    68 129 1
    69 129 1
    70 129 1
    71 129 1
    72 129 1
    73 129 1
    74 129 1
    75 129 1
    76 129 1
    77 129 1
    78 129 1
    79 129 1
    80 129 1
    81 129 1
    82 129 1
    83 129 1
    84 129 1
    85 129 1
    86 129 1
    87 129 1
    88 129 1
    89 129 1
    90 129 1
    91 129 1
    92 129 1
    93 129 1
    94 129 1
    95 129 1
    96 129 1
    97 129 1
    98 129 1
    99 129 1
    100 129 1
    101 129 1
    102 129 1
    103 129 1
    104 129 1
    105 129 1
    106 129 1
    107 129 1
    108 129 1
    109 129 1
    110 129 1
    111 129 1
    112 129 1
    113 129 1
    114 129 1
    115 129 1
    116 129 1
    117 129 1
    118 129 1
    119 129 1
    120 129 1
    121 129 1
    122 129 1
    123 129 1
    124 129 1
    125 129 1
    126 129 1
    127 129 1
    128 129 1;